<!doctype html>
<html lang="ja">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Stopwatch — Luxe</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <!-- 背景のグラデブロブ -->
  <div class="bg">
    <span class="blob b1"></span>
    <span class="blob b2"></span>
    <span class="blob b3"></span>
  </div>

  <main class="container">
    <h1>ストップウォッチ</h1>

    <div class="stopwatch glass" role="group" aria-label="ストップウォッチ">
      <!-- 円形プログレス（装飾） -->
      <svg class="progress-ring" viewBox="0 0 220 220" aria-hidden="true">
        <defs>
          <filter id="glow">
            <feGaussianBlur stdDeviation="3" result="blur" />
            <feMerge>
              <feMergeNode in="blur" />
              <feMergeNode in="SourceGraphic" />
            </feMerge>
          </filter>
          <linearGradient id="grad" x1="0" y1="0" x2="1" y2="1">
            <stop offset="0%" stop-color="#6ea8fe"/>
            <stop offset="50%" stop-color="#9b6bff"/>
            <stop offset="100%" stop-color="#ff6bcb"/>
          </linearGradient>
        </defs>
        <circle class="ring-bg" cx="110" cy="110" r="100"></circle>
        <circle id="ringProgress" class="ring-fg" cx="110" cy="110" r="100" filter="url(#glow)"></circle>
      </svg>

      <div id="display" class="display" aria-live="polite" aria-atomic="true">
        00:00:00.00
      </div>

      <div class="controls">
        <button id="startBtn" class="btn primary">開始</button>
        <button id="pauseBtn" class="btn" disabled>一時停止</button>
        <button id="lapBtn" class="btn" disabled>ラップ</button>
        <button id="resetBtn" class="btn danger" disabled>リセット</button>
      </div>
    </div>

    <section class="laps-wrap glass">
      <h2>ラップ</h2>
      <ol id="laps" class="laps" aria-live="polite"></ol>
    </section>

    <p class="hint">ショートカット：<kbd>Space</kbd>=開始/一時停止、<kbd>L</kbd>=ラップ、<kbd>R</kbd>=リセット</p>
  </main>

  <script src="app.js"></script>
</body>
</html>


:root{
  --bg:#0b0e1a;
  --text:#f4f6ff;
  --muted:#aeb4d6;
  --panel:rgba(17,22,51,.35);
  --stroke:#2b305d;
  --accent:#6ea8fe;
  --accent2:#9b6bff;
  --accent3:#ff6bcb;
  --radius:22px;
  --ring: 0 0 0 4px rgba(110,168,254,.35);
}

*{ box-sizing:border-box; }
html,body{ height:100%; }
body{
  margin:0;
  color:var(--text);
  font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Hiragino Kaku Gothic ProN", "Noto Sans JP", "Yu Gothic UI", "Helvetica Neue", Arial;
  background: var(--bg);
  overflow-x: hidden;
}

/* ---- animated gradient blobs ---- */
.bg{
  position: fixed; inset: 0; z-index: -1; filter: blur(60px) saturate(120%);
}
.blob{
  position:absolute; width:55vmax; height:55vmax; border-radius:50%;
  background: radial-gradient(closest-side, #3f6df0, transparent 70%);
  opacity:.55; mix-blend-mode: screen;
  animation: float 20s ease-in-out infinite;
}
.blob.b1{ left:-15vmax; top:-10vmax; background: radial-gradient(closest-side, #9b6bff, transparent 70%); animation-duration: 26s; }
.blob.b2{ right:-20vmax; top:-15vmax; background: radial-gradient(closest-side, #ff6bcb, transparent 70%); animation-duration: 22s; }
.blob.b3{ left:20vmax; bottom:-15vmax; background: radial-gradient(closest-side, #6ea8fe, transparent 70%); animation-duration: 28s; }
@keyframes float{
  0%{ transform: translate3d(0,0,0) rotate(0deg) scale(1); }
  50%{ transform: translate3d(2%, -3%, 0) rotate(15deg) scale(1.05); }
  100%{ transform: translate3d(0,0,0) rotate(0deg) scale(1); }
}

/* ---- layout ---- */
.container{ max-width:800px; margin:min(10vh,80px) auto; padding:24px; }
h1{ margin:0 0 18px; letter-spacing:.02em; font-weight:800; text-shadow: 0 2px 18px rgba(110,168,254,.25); }
h2{ margin:20px 0 12px; font-size:1.05rem; color:var(--muted); }

/* ---- glass card ---- */
.glass{
  background: var(--panel);
  border-radius: var(--radius);
  box-shadow: 0 15px 50px rgba(0,0,0,.35);
  backdrop-filter: blur(14px) saturate(140%);
  -webkit-backdrop-filter: blur(14px) saturate(140%);
  position: relative;
  overflow: hidden;
}
.glass::before{
  content:""; position:absolute; inset:-1px;
  padding:1px; border-radius: calc(var(--radius) + 2px);
  background: linear-gradient(135deg, rgba(110,168,254,.6), rgba(155,107,255,.4), rgba(255,107,203,.25));
  -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
  -webkit-mask-composite: xor; mask-composite: exclude;
  pointer-events:none;
}

/* ---- stopwatch block ---- */
.stopwatch{ padding:34px 28px 26px; }
.progress-ring{
  position:absolute; inset:0; margin:auto; width:min(62vmin, 320px); height:auto; opacity:.9; pointer-events:none;
}
.ring-bg{
  fill:none; stroke:rgba(255,255,255,.06); stroke-width:10;
}
.ring-fg{
  fill:none; stroke:url(#grad); stroke-width:10; stroke-linecap:round;
  /* 値はJSで上書き */
  stroke-dasharray: 0 999; stroke-dashoffset: 0;
  filter: drop-shadow(0 0 12px rgba(158,131,255,.5));
  transition: opacity .25s ease;
  opacity:.7;
}
body:not(.is-running) .ring-fg{ opacity:.25; }

/* ---- display ---- */
.display{
  position:relative;
  font-variant-numeric: tabular-nums;
  font-size: clamp(40px, 9vw, 80px);
  text-align:center;
  letter-spacing:.03em;
  padding:18px 0 22px;
  z-index:1;
  /* グラデを文字にかける */
  background: linear-gradient(90deg, #fefefe, #dfe7ff 40%, #ffe6f7);
  -webkit-background-clip: text; background-clip: text;
  color: transparent;
}
body.is-running .display{
  animation: breathe 2.2s ease-in-out infinite;
}
@keyframes breathe{
  0%,100%{ transform: translateZ(0) scale(1); text-shadow: 0 0 0 rgba(110,168,254,0); }
  50%{ transform: translateZ(0) scale(1.01); text-shadow: 0 2px 24px rgba(110,168,254,.25); }
}

/* ---- controls ---- */
.controls{
  display:grid;
  grid-template-columns: repeat(4, minmax(0,1fr));
  gap:12px;
}
.btn{
  appearance:none; border:none; border-radius:14px; padding:12px 14px;
  font-size:1rem; color:var(--text); cursor:pointer;
  background: linear-gradient(180deg, #2a2f5f, #1b1f44);
  box-shadow: inset 0 1px 0 rgba(255,255,255,.06), 0 8px 24px rgba(0,0,0,.35);
  transition: transform .08s ease, box-shadow .25s ease, filter .25s ease;
}
.btn:hover{ box-shadow: var(--ring), 0 12px 30px rgba(0,0,0,.45); }
.btn:active{ transform: translateY(1px) scale(.995); }
.btn:disabled{ opacity:.45; cursor:not-allowed; box-shadow:none; filter: grayscale(.2); }

.btn.primary{
  background: linear-gradient(180deg, #3f6df0, #2f56cb);
  box-shadow: 0 10px 35px rgba(63,109,240,.45);
}
.btn.danger{
  background: linear-gradient(180deg, #ff7070, #e65151);
  box-shadow: 0 10px 35px rgba(255,112,112,.4);
}

/* ---- laps ---- */
.laps-wrap{ margin-top:18px; padding:18px 18px; border:1px solid rgba(255,255,255,.05); }
.laps{
  list-style:none; padding:0; margin:0;
  display:grid; gap:10px; max-height:280px; overflow:auto;
}
.lap{
  display:grid; grid-template-columns: 56px 1fr 1fr; align-items:center; gap:12px;
  padding:10px 12px; border-radius:12px;
  background: rgba(17,22,51,.55);
  border:1px solid rgba(255,255,255,.06);
  font-variant-numeric: tabular-nums;
}
.lap .idx{ display:inline-flex; align-items:center; justify-content:center; width:48px; height:32px; border-radius:999px;
  background: linear-gradient(90deg, rgba(110,168,254,.25), rgba(155,107,255,.25));
  border:1px solid rgba(255,255,255,.08);
}
.lap small{ color:var(--muted); }

/* ---- accessibility / motion ---- */
@media (prefers-reduced-motion: reduce){
  .blob, .display{ animation: none !important; }
}

/* ---- kbd ---- */
kbd{
  font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
  font-size:.9em; padding:.15em .4em; border-radius:6px;
  border:1px solid rgba(255,255,255,.2);
  background:rgba(255,255,255,.06);
}
.hint{ color:var(--muted); margin-top:14px; }

/* small screens */
@media (max-width:520px){
  .controls{ grid-template-columns: repeat(2, minmax(0,1fr)); }
}

(() => {
  const $ = (sel) => document.querySelector(sel);

  const display = $("#display");
  const startBtn = $("#startBtn");
  const pauseBtn = $("#pauseBtn");
  const lapBtn = $("#lapBtn");
  const resetBtn = $("#resetBtn");
  const lapsOl = $("#laps");

  // 円形プログレス
  const ring = $("#ringProgress");
  const R = 100;
  const CIRC = 2 * Math.PI * R;
  ring.style.strokeDasharray = `${CIRC} ${CIRC}`;
  ring.style.strokeDashoffset = `${CIRC}`;

  // ---- Stopwatch core ----
  class Stopwatch {
    constructor(onTick) {
      this.onTick = onTick;
      this.reset();
    }
    start() {
      if (this.running) return;
      this.running = true;
      this.startAt = performance.now() - this.elapsed;
      const loop = (t) => {
        if (!this.running) return;
        this.elapsed = t - this.startAt;
        this.onTick(this.elapsed);
        this._raf = requestAnimationFrame(loop);
      };
      this._raf = requestAnimationFrame(loop);
    }
    pause() {
      if (!this.running) return;
      this.running = false;
      cancelAnimationFrame(this._raf);
      this.onTick(this.elapsed);
    }
    reset() {
      this.running = false;
      this.elapsed = 0;
      this.lastLapAt = 0;
      if (this._raf) cancelAnimationFrame(this._raf);
      this.onTick?.(this.elapsed);
    }
    lap() {
      const now = this.elapsed;
      const lapTime = now - this.lastLapAt;
      this.lastLapAt = now;
      return { total: now, lap: lapTime };
    }
  }

  // ---- helpers ----
  const pad2 = (n) => String(n).padStart(2, "0");
  const format = (ms) => {
    const totalMs = Math.floor(ms);
    const hundredths = Math.floor((totalMs % 1000) / 10); // 00-99
    const totalSec = Math.floor(totalMs / 1000);
    const s = totalSec % 60;
    const m = Math.floor(totalSec / 60) % 60;
    const h = Math.floor(totalSec / 3600);
    return `${pad2(h)}:${pad2(m)}:${pad2(s)}.${pad2(hundredths)}`;
  };

  const sw = new Stopwatch((ms) => {
    // 表示
    display.textContent = format(ms);
    // 円形プログレス（60秒で一周）
    const progress = (ms % 60000) / 60000; // 0..1
    ring.style.strokeDashoffset = String(CIRC * (1 - progress));
  });

  // ---- UI state ----
  function setState({ running, elapsed }) {
    document.body.classList.toggle("is-running", running);
    startBtn.textContent = running ? "再開" : "開始";
    startBtn.disabled = running;
    pauseBtn.disabled = !running;
    lapBtn.disabled = !running;
    resetBtn.disabled = running && elapsed < 10;
    if (!running && elapsed === 0) resetBtn.disabled = true;
  }
  setState({ running: false, elapsed: 0 });

  // ---- events ----
  startBtn.addEventListener("click", () => {
    sw.start();
    setState({ running: true, elapsed: sw.elapsed });
  });

  pauseBtn.addEventListener("click", () => {
    sw.pause();
    setState({ running: false, elapsed: sw.elapsed });
  });

  resetBtn.addEventListener("click", () => {
    sw.reset();
    lapsOl.innerHTML = "";
    ring.style.strokeDashoffset = String(CIRC);
    setState({ running: false, elapsed: 0 });
  });

  lapBtn.addEventListener("click", () => {
    const { total, lap } = sw.lap();
    const li = document.createElement("li");
    li.className = "lap";
    const index = lapsOl.children.length + 1;
    li.innerHTML = `
      <span class="idx">#${String(index).padStart(2,"0")}</span>
      <span><small>Lap</small><br>${format(lap)}</span>
      <span><small>Total</small><br>${format(total)}</span>
    `;
    lapsOl.prepend(li);
  });

  // ---- keyboard shortcuts ----
  window.addEventListener("keydown", (e) => {
    if (e.repeat) return;
    const tag = (e.target && e.target.tagName) || "";
    if (tag === "INPUT" || tag === "TEXTAREA") return;

    if (e.code === "Space") {
      e.preventDefault();
      if (sw.running) {
        pauseBtn.click();
      } else {
        startBtn.click();
      }
    } else if (e.key.toLowerCase() === "l") {
      if (!lapBtn.disabled) lapBtn.click();
    } else if (e.key.toLowerCase() === "r") {
      resetBtn.click();
    }
  });
})();

